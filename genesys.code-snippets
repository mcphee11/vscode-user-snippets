{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // \\$1, \\$2 for tab stops, \\$0 for the final cursor position, and \\${1:label}, \\${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Genesys HTML Basic template": {
      "scope": "html",
      "prefix": "genesys basic",
      "body": [
        "<!DOCTYPE html>",
        "<!-- Created as an example by https://github.com/mcphee11 Version 2.0 -->",
        "<html>",
        "  <head>",
        "    <meta name=\"robots\" content=\"noindex\" />",
        "    <meta charset=\"utf-8\" />",
        "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />",
        "    <title></title>",
        "    <meta name=\"Template\" content=\"\" />",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
        "    <!-- Genesys CSS https://spark.genesys.com/ -->",
        "    <link href=\"https://dhqbrvplips7x.cloudfront.net/common-ui-docs/genesys-webcomponents/3.8.1-178/genesys-webcomponents/genesys-webcomponents.css\" rel=\"stylesheet\" />",
        "    <script type=\"module\" src=\"https://dhqbrvplips7x.cloudfront.net/common-ui-docs/genesys-webcomponents/3.8.1-178/genesys-webcomponents/genesys-webcomponents.esm.js\"></script>",
        "    <!-- Genesys SDK info https://developer.genesys.cloud/ -->",
        "    <script src=\"https://sdk-cdn.mypurecloud.com/javascript/latest/purecloud-platform-client-v2.min.js\"></script>",
        "  </head>",
        "  <body onload=\"start()\">",
        "    <script>",
        "      'use strict' //Enables strict mode is JavaScript",
        "      let url = new URL(document.location.href)",
        "      let gc_region = url.searchParams.get('gc_region')",
        "      let gc_clientId = url.searchParams.get('gc_clientId')",
        "      let gc_redirectUrl = url.searchParams.get('gc_redirectUrl')",
        "",
        "      //Getting and setting the GC details from dynamic URL and session storage",
        "      gc_region ? sessionStorage.setItem('gc_region', gc_region) : gc_region = sessionStorage.getItem('gc_region')",
        "      gc_clientId ? sessionStorage.setItem('gc_clientId', gc_clientId) : gc_clientId = sessionStorage.getItem('gc_clientId')",
        "      gc_redirectUrl ? sessionStorage.setItem('gc_redirectUrl', gc_redirectUrl) : gc_redirectUrl = sessionStorage.getItem('gc_redirectUrl')",
        "",
        "      let platformClient = require('platformClient')",
        "      const client = platformClient.ApiClient.instance",
        "      const uapi = new platformClient.UsersApi()",
        "",
        "      async function start() {",
        "        try {",
        "          client.setEnvironment(gc_region)",
        "          client.setPersistSettings(true, '_mm_')",
        "",
        "          console.log('%cLogging in to Genesys Cloud', 'color: green')",
        "          await client.loginImplicitGrant(gc_clientId, gc_redirectUrl, {})",
        "",
        "          //GET Current UserId",
        "          let user = await uapi.getUsersMe({})",
        "          console.log(user)",
        "",
        "          //Enter in starting code.",
        "        } catch (err) {",
        "          console.log('Error: ', err)",
        "        }",
        "      } //End of start() function",
        "    </script>",
        "  </body>",
        "</html>"
      ],
      "description": "Genesys HTML Basic template"
    },
    "Genesys HTML Advanced template": {
      "scope": "html",
      "prefix": "genesys advanced",
      "body": [
        "<!DOCTYPE html>",
        "<!-- Created as an example by https://github.com/mcphee11 Version 2.0 -->",
        "<html>",
        "  <head>",
        "    <meta name=\"robots\" content=\"noindex\" />",
        "    <meta charset=\"utf-8\" />",
        "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />",
        "    <title></title>",
        "    <meta name=\"Template\" content=\"\" />",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
        "    <!-- Genesys CSS https://spark.genesys.com/ -->",
        "    <link href=\"https://dhqbrvplips7x.cloudfront.net/common-ui-docs/genesys-webcomponents/3.8.1-178/genesys-webcomponents/genesys-webcomponents.css\" rel=\"stylesheet\" />",
        "    <script type=\"module\" src=\"https://dhqbrvplips7x.cloudfront.net/common-ui-docs/genesys-webcomponents/3.8.1-178/genesys-webcomponents/genesys-webcomponents.esm.js\"></script>",
        "    <!-- Genesys SDK info https://developer.genesys.cloud/ -->",
        "    <script src=\"https://sdk-cdn.mypurecloud.com/javascript/latest/purecloud-platform-client-v2.min.js\"></script>",
        "  </head>",
        "    <body onload=\"start()\">",
        "    <script>",
        "      'use strict' //Enables strict mode is JavaScript",
        "      let url = new URL(document.location.href)",
        "      let gc_region = url.searchParams.get('gc_region')",
        "      let gc_clientId = url.searchParams.get('gc_clientId')",
        "      let gc_redirectUrl = url.searchParams.get('gc_redirectUrl')",
        "      let gc_conversationId = url.searchParams.get('gc_conversationId')",
        "      let userId",
        "",
        "      //Getting and setting the GC details from dynamic URL and session storage",
        "      gc_region ? sessionStorage.setItem('gc_region', gc_region) : gc_region = sessionStorage.getItem('gc_region')",
        "      gc_clientId ? sessionStorage.setItem('gc_clientId', gc_clientId) : gc_clientId = sessionStorage.getItem('gc_clientId')",
        "      gc_redirectUrl ? sessionStorage.setItem('gc_redirectUrl', gc_redirectUrl) : gc_redirectUrl = sessionStorage.getItem('gc_redirectUrl')",
        "      gc_conversationId ? sessionStorage.setItem('gc_conversationId', gc_conversationId) : gc_conversationId = sessionStorage.getItem('gc_conversationId')",
        "",
        "      let platformClient = require('platformClient')",
        "      const client = platformClient.ApiClient.instance",
        "      const uapi = new platformClient.UsersApi()",
        "      const napi = new platformClient.NotificationsApi()",
        "      const capi = new platformClient.ConversationsApi()",
        "",
        "      async function start() {",
        "        try {",
        "          client.setEnvironment(gc_region)",
        "          client.setPersistSettings(true, '_mm_')",
        "",
        "          console.log('%cLogging in to Genesys Cloud', 'color: green')",
        "          await client.loginImplicitGrant(gc_clientId, gc_redirectUrl, {})",
        "",
        "          //GET Current UserId",
        "          let user = await uapi.getUsersMe({})",
        "          console.log(user)",
        "          userId = user.id",
        "",
        "          //Enter in additional starting code.",
        "          try {",
        "            //Need to store wss as only can have 15 per agent. Also bad practice to create multiply",
        "            if (sessionStorage.getItem('gc_channelid')) {",
        "              console.log('channelid already exists...')",
        "              var channelid = sessionStorage.getItem('gc_channelid')",
        "",
        "              let callsTopic = `v2.users.\\${userId}.conversations.calls`",
        "              // prettier-ignore",
        "              await napi.postNotificationsChannelSubscriptions(channelid, [{id: callsTopic}])",
        "              console.log(`%cSubscribed to topic \\${callsTopic}`, 'color: green')",
        "            } else {",
        "              let channel = await napi.postNotificationsChannels()",
        "              console.log('Created Notification Channel: ', channel)",
        "",
        "              let callsTopic = `v2.users.\\${userId}.conversations.calls`",
        "              // prettier-ignore",
        "              await napi.postNotificationsChannelSubscriptions(channel.id, [{id: callsTopic}])",
        "              console.log(`Subscribed to topic \\${callsTopic}`)",
        "              sessionStorage.setItem('gc_channelid', channel.id)",
        "            }",
        "          } catch (err) {",
        "            console.error('Notification Error: ', err)",
        "          }",
        "",
        "          //Create websocket for events",
        "          try {",
        "            let socket = new WebSocket(`wss://streaming.\\${gc_region}/channels/\\${sessionStorage.getItem('gc_channelid')}`)",
        "",
        "            socket.onmessage = async function (event) {",
        "              let details = JSON.parse(event.data)",
        "",
        "              gc_conversationId ? console.log('wss conversationId: ', gc_conversationId) : null",
        "              details?.eventBody?.message === 'WebSocket Heartbeat' ? console.log('%c%s Heartbeat', 'color: red', '❤️') : console.log(details)",
        "              //if Message notification",
        "              if (details.topicName.includes('calls')) {",
        "                console.log('Messaging Notification: ', details)",
        "                // prettier-ignore",
        "                let agentParticipant = details.eventBody.participants.slice().reverse().find(p => p.purpose === 'agent' && p.state === 'connected')",
        "                if (agentParticipant) {",
        "                }",
        "              }",
        "            }",
        "            console.log(`Waiting for events on wss://streaming.\\${gc_region}/channels/\\${sessionStorage.getItem('gc_channelid')}`)",
        "          } catch (err) {",
        "            console.error('Websocket error: ', err)",
        "          }",
        "        } catch (err) {",
        "          console.log('Error: ', err)",
        "        }",
        "      } //End of start() function",
        "    </script>",
        "  </body>",
        "</html>"
      ],
      "description": "Genesys HTML Advanced template"
    }
  }
  